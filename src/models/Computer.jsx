/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: dark_igorek (https://sketchfab.com/dark_igorek)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/commodore-64-computer-full-pack-1f43612fa2d54041bbe2bdff8164c2cd
Title: Commodore 64 || Computer (Full Pack)
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'
import ComputerScene from '../assets/3d/Computer.glb'

const Computer = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const ComputerRef = useRef()
  const { gl, viewport } = useThree()
  const { nodes, materials } = useGLTF(ComputerScene)

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches
      ? e.touches[0].clientX
      : e.clientX;
    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);

  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

     if (isRotating) {
      const clientX = e.touches
      ? e.touches[0].clientX
      : e.clientX;

    const delta = (clientX - lastX.current) / viewport.width;

    ComputerRef.current.rotation.y += delta * Math.PI * 0.01;

    lastX.current = clientX;

    rotationSpeed.current = delta * Math.PI * 0.01;}
  }

  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft') {
      setIsRotating(true);
      ComputerRef.current.rotation.y += 0.01 * Math.PI;
    }
    else if (e.key === 'ArrowRight') {
      setIsRotating(true);
      ComputerRef.current.rotation.y -= 0.01 * Math.PI;
    }
  }

  const handleKeyUp = (e) => {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      setIsRotating(false);
    }
  }

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;

      ComputerRef.current.rotation.y += rotationSpeed.current;
      }

      ComputerRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = ComputerRef.current.rotation.y;

      /**script from gpt
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation = ((ComputerRef.current.rotation.y % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
      const stageRotation = (2 * Math.PI - normalizedRotation) % (2 * Math.PI);

      switch (true) {
        case stageRotation >= 0 && stageRotation < Math.PI / 4:
          setCurrentStage(1);
          break;
        case stageRotation >= Math.PI / 2 && stageRotation < Math.PI * 3 / 4:
          setCurrentStage(2);
          break;
        case stageRotation >= Math.PI && stageRotation < 5 * Math.PI / 4:
          setCurrentStage(3);
          break;
        case stageRotation >= 3 * Math.PI / 2 && stageRotation < 1.75 * Math.PI:
          setCurrentStage(4);
          break;
          default:
          setCurrentStage(null);
      }



    }
  });

  useEffect(() => {
    const canvas = gl.domElement
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group ref={ComputerRef} {...props} dispose={null}>
      <group position={[-1.258, 0.195, 2.2]}>
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.computer_details}
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials.computer_keyboard}
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.computer_main_body}
        />
      </group>
      <group position={[0.542, -0.111, -4.23]}>
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials.cable}
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials.connector}
        />
      </group>
      <group position={[0, 0.368, -2.43]}>
        <mesh
          geometry={nodes.Object_17.geometry}
          material={materials.monitor_black}
        />
        <mesh
          geometry={nodes.Object_18.geometry}
          material={materials.monitor_white}
        />
        <mesh
          geometry={nodes.Object_19.geometry}
          material={materials.monitor_screen}
        />
        <mesh
          geometry={nodes.Object_21.geometry}
          material={materials.monitor_white}
          position={[1.265, -0.148, 2.24]}
          rotation={[Math.PI / 2, 0, 0]}
        />
      </group>
      <mesh
        geometry={nodes.Object_8.geometry}
        material={materials.peripherals}
        position={[3.182, 0.071, -2.601]}
      />
      <mesh
        geometry={nodes.Object_10.geometry}
        material={materials.peripherals}
        position={[4.297, 0.478, 1.302]}
        rotation={[0, 0.602, 0]}
      />
      <mesh
        geometry={nodes.Object_12.geometry}
        material={materials.peripherals}
        position={[-4.423, 1.212, -1.111]}
      />
      <mesh
        geometry={nodes.Object_23.geometry}
        material={materials.monitor_plug}
        position={[0.003, 2.252, -2.083]}
      />
    </a.group>
  )
}

export default Computer
